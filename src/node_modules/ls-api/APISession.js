var User = require('ls-user').User;
var assert = require('ls-assert').assert;

var APIEndpoints = require('./APIEndpoints.js').APIEndpoints;
var APIError = require('./APIError.js').APIError;
var HTTPStatus = require('./HTTPStatus').HTTPStatus;

class APISession {
	constructor(api) {
		/*
		*  Create a new APISession object. 'api' is an initialized
		*  APIInterface object.
		*/
		this.api = api;
		this.user = null;
		this.data = null;
		this.token = null;
		this.renew_interval_id = null;
	}

	async logout() {
		assert(this.user !== null);
		assert(this.data !== null);

		await this.api.call(APIEndpoints.AUTH_LOGOUT, null);
		this.clear();
	}

	async login(user, pass, permanent) {
		let resp = await this.api.call(
			APIEndpoints.AUTH_LOGIN,
			{
				username: user,
				password: pass,
				permanent: permanent,
				who: 'LibreSignage-Web-Interface'
			}
		);
		this.data = resp.session;
		this.token = resp.token;
		this.user = new User(this.api);

		await this.user.load(null);
		await this.start_renewal();
	}

	clear() {
		/*
		*  Clear all session related data.
		*/
		this.user = null;
		this.data = null;
	}

	async reload(token) {
		/*
		*  Attempt to reload a session using 'token'. This function
		*  returns true on success and false otherwise.
		*/
		let resp = null;

		this.token = token;
		try {
			resp = await this.api.call(APIEndpoints.AUTH_GET_DATA, null);
		} catch (e) {
			if (e instanceof APIError && e.is(HTTPStatus.UNAUTHORIZED)) {
				return false;
			} else {
				throw e;
			}
		}

		this.user = new User(this.api);
		await this.user.load(null);

		this.data = resp.session;
		await this.start_renewal();

		return true;
	}

	async start_renewal() {
		/*
		*  Initialize a new session renewal loop. This function
		*  automatically stops any previous loops to make sure
		*  multiple simultaneous loops are never running.
		*/
		let t = this.data.max_age
				- APISession.MIN_MAX_AGE
				+ APISession.MAX_AGE_HEADROOM;

		if (this.data.permanent === true) { return; }
		if (this.data.max_age < APISession.MIN_MAX_AGE) {
			throw new Error(
				`Maximum session age too low! ` +
				`(MAX_AGE < ${APISession.MIN_MAX_AGE}s)`
			);
		}
		console.log(`APIInterface: Init session renewal loop. (${t}s)`);

		this.stop_renewal();
		await this.renew();

		this.renew_interval_id = setInterval(
			async () => await this.renew(),
			t*1000
		);
	}

	stop_renewal() {
		/*
		*  Stop the currently running session renewal loop.
		*/
		if (this.renew_interval_id != null) {
			console.log('APISession: Stop session renewal loop.');
			clearInterval(this.renew_interval_id);
			this.renew_interval_id = null;
		}
	}

	async renew() {
		let resp = null;
		console.log('APIInterface: Renew session.');
		try {
			resp = await this.api.call(APIEndpoints.AUTH_SESSION_RENEW, null);
		} catch (e) {
			this.clear();
			throw e;
		}
		this.data = resp.session;
	}

	get_user()      { return this.user;           }
	get_token()     { return this.token;          }
	get_id()        { return this.data.id;        }
	get_who()       { return this.data.who;       }
	get_from()      { return this.data.from;      }
	get_created()   { return this.data.created;   }
	get_max_age()   { return this.data.max_age;   }
	get_permanent() { return this.data.permanent; }
}
APISession.MIN_MAX_AGE = 30;
APISession.MAX_AGE_HEADROOM = 10;
exports.APISession = APISession;
